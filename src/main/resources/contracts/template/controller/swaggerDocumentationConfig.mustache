package {{configPackage}};
import static springfox.documentation.builders.PathSelectors.regex;
import com.fasterxml.classmate.TypeResolver;
import java.util.function.Predicate;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.bind.annotation.RequestMapping;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.ApiSelectorBuilder;
import springfox.documentation.spring.web.plugins.Docket;
import {{modelPackage}}.*;
{{#apiInfo}}
{{#apis}}
import {{apiPackage}}.{{classname}};
{{/apis}}
{{/apiInfo}}
@Configuration
public class {{title}}DocketConfig {
    private static final String PATH_PARAM = "\\{.*}";
    private static final String ALL_AFTER_SLASH = "\\//.*";
  @Autowired
  private TypeResolver typeResolver;
    ApiInfo apiInfo() {
        return new ApiInfoBuilder()
            .title("{{appName}}")
            .description("{{{appDescription}}}")
            .license("{{licenseInfo}}")
            .licenseUrl("{{licenseUrl}}")
            .termsOfServiceUrl("{{infoUrl}}")
            .version("{{appVersion}}")
            .contact(new Contact("","", "{{infoEmail}}"))
            .build();
    }
  {{#apiInfo}}
    {{#apis}}
    @Bean
    public Docket customImplementation{{classname}}(){
            Class<{{classname}}> c = {{classname}}.class;
            ApiSelectorBuilder apiSelectorBuilder = new Docket(DocumentationType.SWAGGER_2).groupName(c.getSimpleName())
                    .apiInfo(apiInfo()).forCodeGeneration(Boolean.TRUE).select();
            List<String> paths = Arrays.asList(c.getMethods()).stream().map(m -> {
                RequestMapping annotation = m.getAnnotation(RequestMapping.class);
                return annotation != null ? annotation.value() : null;
            }).filter(Objects::nonNull).flatMap(Arrays::stream).collect(Collectors.toList());
            Predicate<String> predicate = o -> false;
            for (int i = 0; i < paths.size(); i++) {
                String p = paths.get(i);
                p = p.replaceAll(PATH_PARAM, "");
                p = p.replaceAll(ALL_AFTER_SLASH, "");
                predicate = predicate.or(regex(".*" + p + ".*"));
            }
            apiSelectorBuilder = apiSelectorBuilder.paths(predicate);
            Docket docket = apiSelectorBuilder.build();
            docket = docket
                .directModelSubstitute(java.time.LocalDate.class, java.sql.Date.class)
                .directModelSubstitute(java.time.OffsetDateTime.class, java.util.Date.class)
                {{#models}}
                {{#model}}
                {{#arrayModelType}}
                    .additionalModels(typeResolver.resolve({{arrayModelType}}.class))
                {{/arrayModelType}}
                {{/model}}
                {{/models}}
          ;
          return docket;
    }
  {{/apis}}
  {{/apiInfo}}
}